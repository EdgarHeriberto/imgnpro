#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
//var router = require('../routes/router');
var User = require('../models/user.js');
var OrderPacks = require('../models/orderpacks.js');

var debug = require('debug')('imaginadores:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */



//  var app = require('express')();
// var http = require('http').Server(app);

var io = require('socket.io')(server);

// app.get('/', function(req, res){
//   res.sendfile('index.html');
// });

// IO

io.on('connection', function(socket){
  console.log('a user connected');
  socket.broadcast.emit('Se conectÃ³ un usuario');
  
  // se desconecta el usuario
  socket.on('disconnect', function(){
    console.log('user disconnected');
  });
  // llega un mensaje
  socket.on('chat_msg', function(msg){
    console.log('message: ' + msg);
    var jsMsg = JSON.parse(msg);
    console.log(jsMsg);
    console.log(jsMsg.userid);
    User.findOne({_id: jsMsg.userid}, function(err,user){
        console.log(err);
        if (err){
            console.log(err);
        }else{
          if (user){
            io.emit('chat_msg', '{"msg":"' + jsMsg.msg +'","username":"' + user.userlongname +  '"}'  );
          }else{
            console.log('Nada');
          }

        }

    });
    

    
  });
  socket.on('id', function(msg){
    console.log('message: ' + msg);
   

  });

  socket.on('get_packages', function(msg){
    console.log(msg);
    //var jsMsg = JSON.parse(msg);

    OrderPacks.find({status:'En Proceso', isworking:false}, function(err, orderpacks){
      if (err){
            console.log(err);
        }else{
          if (orderpacks){

            io.emit('packs_list', '{"packs":'+ JSON.stringify(orderpacks) + '}'  );
          }else{
            console.log('Nada');
          }
        }
    }).select('_id imagecount').limit(6);
  });
});

// http.listen(3000, function(){
//   console.log('listening on *:3000');
// });



server.listen(port);
server.on('error', onError);
server.on('listening', onListening);





/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
